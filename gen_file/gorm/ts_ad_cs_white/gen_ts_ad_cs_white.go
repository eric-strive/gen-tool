///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package bis

import (
	"context"
	"fmt"
	"github.com/eric-strive/gen-tool/internal/repository/mysql"

	"gitlab.intsig.net/cs-server2/services/purchase/app_recharge/errno"
	"gorm.io/gorm"
)

type TsAdCsWhite struct {
	Base
}

func NewModel() *TsAdCsWhite {
	return new(TsAdCsWhite)
}

func NewQueryBuilder() *tsAdCsWhiteQueryBuilder {
	return new(tsAdCsWhiteQueryBuilder)
}

func (t *TsAdCsWhite) Create(ctx context.Context, db *gorm.DB) (id int64, err error) {
	if err = db.Create(t).Error; err != nil {
		return 0, errno.NewMsgLog("create err", errno.CommonErrorNo, err, ctx)
	}
	return t.Id, nil
}

type tsAdCsWhiteQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	limit  int
	offset int
}

func (qb *tsAdCsWhiteQueryBuilder) buildQuery(db *gorm.DB) *gorm.DB {
	ret := db
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	ret = ret.Limit(qb.limit).Offset(qb.offset)
	return ret
}

func (qb *tsAdCsWhiteQueryBuilder) Updates(ctx context.Context, db *gorm.DB, m map[string]interface{}) (err error) {
	db = db.Model(&TsAdCsWhite{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	if err = db.Updates(m).Error; err != nil {
		return errno.NewMsgLog("updates err", errno.CommonErrorNo, err, ctx)
	}
	return nil
}

func (qb *tsAdCsWhiteQueryBuilder) Delete(ctx context.Context, db *gorm.DB) (err error) {
	for _, where := range qb.where {
		db = db.Where(where.prefix, where.value)
	}

	if err = db.Delete(&TsAdCsWhite{}).Error; err != nil {
		return errno.NewMsgLog("delete err", errno.CommonErrorNo, err, ctx)
	}
	return nil
}

func (qb *tsAdCsWhiteQueryBuilder) Count(db *gorm.DB) (int64, error) {
	var c int64
	res := qb.buildQuery(db).Model(&TsAdCsWhite{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		c = 0
	}
	return c, res.Error
}

func (qb *tsAdCsWhiteQueryBuilder) First(db *gorm.DB) (*TsAdCsWhite, error) {
	ret := &TsAdCsWhite{}
	res := qb.buildQuery(db).First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		ret = nil
	}
	return ret, res.Error
}

func (qb *tsAdCsWhiteQueryBuilder) QueryOne(db *gorm.DB) (*TsAdCsWhite, error) {
	qb.limit = 1
	ret, err := qb.QueryAll(db)
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *tsAdCsWhiteQueryBuilder) QueryAll(db *gorm.DB) ([]*TsAdCsWhite, error) {
	var ret []*TsAdCsWhite
	err := qb.buildQuery(db).Find(&ret).Error
	return ret, err
}

func (qb *tsAdCsWhiteQueryBuilder) Limit(limit int) *tsAdCsWhiteQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) Offset(offset int) *tsAdCsWhiteQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) WhereId(p mysql.Predicate, value int32) *tsAdCsWhiteQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", p),
		value,
	})
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) WhereIdIn(value []int32) *tsAdCsWhiteQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "IN"),
		value,
	})
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) WhereIdNotIn(value []int32) *tsAdCsWhiteQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) OrderById(asc bool) *tsAdCsWhiteQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "id "+order)
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) WhereName(p mysql.Predicate, value string) *tsAdCsWhiteQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "name", p),
		value,
	})
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) WhereNameIn(value []string) *tsAdCsWhiteQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "name", "IN"),
		value,
	})
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) WhereNameNotIn(value []string) *tsAdCsWhiteQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "name", "NOT IN"),
		value,
	})
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) OrderByName(asc bool) *tsAdCsWhiteQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "name "+order)
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) WhereOs(p mysql.Predicate, value string) *tsAdCsWhiteQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "os", p),
		value,
	})
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) WhereOsIn(value []string) *tsAdCsWhiteQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "os", "IN"),
		value,
	})
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) WhereOsNotIn(value []string) *tsAdCsWhiteQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "os", "NOT IN"),
		value,
	})
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) OrderByOs(asc bool) *tsAdCsWhiteQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "os "+order)
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) WhereIdfa(p mysql.Predicate, value string) *tsAdCsWhiteQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "idfa", p),
		value,
	})
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) WhereIdfaIn(value []string) *tsAdCsWhiteQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "idfa", "IN"),
		value,
	})
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) WhereIdfaNotIn(value []string) *tsAdCsWhiteQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "idfa", "NOT IN"),
		value,
	})
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) OrderByIdfa(asc bool) *tsAdCsWhiteQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "idfa "+order)
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) WhereOaid(p mysql.Predicate, value string) *tsAdCsWhiteQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "oaid", p),
		value,
	})
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) WhereOaidIn(value []string) *tsAdCsWhiteQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "oaid", "IN"),
		value,
	})
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) WhereOaidNotIn(value []string) *tsAdCsWhiteQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "oaid", "NOT IN"),
		value,
	})
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) OrderByOaid(asc bool) *tsAdCsWhiteQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "oaid "+order)
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) WhereDeviceId(p mysql.Predicate, value string) *tsAdCsWhiteQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "device_id", p),
		value,
	})
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) WhereDeviceIdIn(value []string) *tsAdCsWhiteQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "device_id", "IN"),
		value,
	})
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) WhereDeviceIdNotIn(value []string) *tsAdCsWhiteQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "device_id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) OrderByDeviceId(asc bool) *tsAdCsWhiteQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "device_id "+order)
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) WhereUserId(p mysql.Predicate, value string) *tsAdCsWhiteQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "user_id", p),
		value,
	})
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) WhereUserIdIn(value []string) *tsAdCsWhiteQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "user_id", "IN"),
		value,
	})
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) WhereUserIdNotIn(value []string) *tsAdCsWhiteQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "user_id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) OrderByUserId(asc bool) *tsAdCsWhiteQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "user_id "+order)
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) WhereType(p mysql.Predicate, value string) *tsAdCsWhiteQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "type", p),
		value,
	})
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) WhereTypeIn(value []string) *tsAdCsWhiteQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "type", "IN"),
		value,
	})
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) WhereTypeNotIn(value []string) *tsAdCsWhiteQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "type", "NOT IN"),
		value,
	})
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) OrderByType(asc bool) *tsAdCsWhiteQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "type "+order)
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) WhereVerifySign(p mysql.Predicate, value string) *tsAdCsWhiteQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "verify_sign", p),
		value,
	})
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) WhereVerifySignIn(value []string) *tsAdCsWhiteQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "verify_sign", "IN"),
		value,
	})
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) WhereVerifySignNotIn(value []string) *tsAdCsWhiteQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "verify_sign", "NOT IN"),
		value,
	})
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) OrderByVerifySign(asc bool) *tsAdCsWhiteQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "verify_sign "+order)
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) WhereDescription(p mysql.Predicate, value string) *tsAdCsWhiteQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "description", p),
		value,
	})
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) WhereDescriptionIn(value []string) *tsAdCsWhiteQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "description", "IN"),
		value,
	})
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) WhereDescriptionNotIn(value []string) *tsAdCsWhiteQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "description", "NOT IN"),
		value,
	})
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) OrderByDescription(asc bool) *tsAdCsWhiteQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "description "+order)
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) WhereRemark(p mysql.Predicate, value string) *tsAdCsWhiteQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "remark", p),
		value,
	})
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) WhereRemarkIn(value []string) *tsAdCsWhiteQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "remark", "IN"),
		value,
	})
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) WhereRemarkNotIn(value []string) *tsAdCsWhiteQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "remark", "NOT IN"),
		value,
	})
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) OrderByRemark(asc bool) *tsAdCsWhiteQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "remark "+order)
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) WhereIsDeleted(p mysql.Predicate, value int32) *tsAdCsWhiteQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_deleted", p),
		value,
	})
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) WhereIsDeletedIn(value []int32) *tsAdCsWhiteQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_deleted", "IN"),
		value,
	})
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) WhereIsDeletedNotIn(value []int32) *tsAdCsWhiteQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_deleted", "NOT IN"),
		value,
	})
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) OrderByIsDeleted(asc bool) *tsAdCsWhiteQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "is_deleted "+order)
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) WhereCreateTime(p mysql.Predicate, value int64) *tsAdCsWhiteQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "create_time", p),
		value,
	})
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) WhereCreateTimeIn(value []int64) *tsAdCsWhiteQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "create_time", "IN"),
		value,
	})
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) WhereCreateTimeNotIn(value []int64) *tsAdCsWhiteQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "create_time", "NOT IN"),
		value,
	})
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) OrderByCreateTime(asc bool) *tsAdCsWhiteQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "create_time "+order)
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) WhereCreateBy(p mysql.Predicate, value string) *tsAdCsWhiteQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "create_by", p),
		value,
	})
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) WhereCreateByIn(value []string) *tsAdCsWhiteQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "create_by", "IN"),
		value,
	})
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) WhereCreateByNotIn(value []string) *tsAdCsWhiteQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "create_by", "NOT IN"),
		value,
	})
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) OrderByCreateBy(asc bool) *tsAdCsWhiteQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "create_by "+order)
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) WhereUpdateBy(p mysql.Predicate, value string) *tsAdCsWhiteQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "update_by", p),
		value,
	})
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) WhereUpdateByIn(value []string) *tsAdCsWhiteQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "update_by", "IN"),
		value,
	})
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) WhereUpdateByNotIn(value []string) *tsAdCsWhiteQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "update_by", "NOT IN"),
		value,
	})
	return qb
}

func (qb *tsAdCsWhiteQueryBuilder) OrderByUpdateBy(asc bool) *tsAdCsWhiteQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "update_by "+order)
	return qb
}
